'use strict';

exports.__esModule = true;

var _graphql = require('graphql');

var _formatRequestErrors = require('./__forks__/formatRequestErrors');

var _formatRequestErrors2 = _interopRequireDefault(_formatRequestErrors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step("next", value); }, function (err) { return step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NetworkLayer = function () {
  function NetworkLayer(_ref) {
    var schema = _ref.schema;
    var rootValue = _ref.rootValue;
    var contextValue = _ref.contextValue;
    var onError = _ref.onError;

    _classCallCheck(this, NetworkLayer);

    this.schema = schema;
    this.rootValue = rootValue;
    this.context = contextValue;
    this.onError = onError;
  }

  NetworkLayer.prototype.sendMutation = function sendMutation(mutationRequest) {
    if (mutationRequest.getFiles()) {
      throw new Error('uploading files not supported');
    }

    return this.executeRequest('mutation', mutationRequest);
  };

  NetworkLayer.prototype.sendQueries = function sendQueries(queryRequests) {
    var _this = this;

    return Promise.all(queryRequests.map(function (queryRequest) {
      return _this.executeRequest('query', queryRequest);
    }));
  };

  NetworkLayer.prototype.executeRequest = function () {
    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee(requestType, request) {
      var _ref3, data, errors;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return (0, _graphql.graphql)(this.schema, request.getQueryString(), this.rootValue, this.context, request.getVariables());

            case 2:
              _ref3 = _context.sent;
              data = _ref3.data;
              errors = _ref3.errors;

              if (!errors) {
                _context.next = 9;
                break;
              }

              request.reject(new Error('Failed to execute ' + requestType + ' `' + request.getDebugName() + '` for ' + ('the following reasons:\n\n' + (0, _formatRequestErrors2.default)(request, errors))));
              if (this.onError) {
                this.onError(errors, request);
              }

              return _context.abrupt('return');

            case 9:

              request.resolve({ response: data });

            case 10:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function executeRequest(_x, _x2) {
      return _ref2.apply(this, arguments);
    }

    return executeRequest;
  }();

  NetworkLayer.prototype.supports = function supports() {
    return false;
  };

  return NetworkLayer;
}();

exports.default = NetworkLayer;
module.exports = exports['default'];